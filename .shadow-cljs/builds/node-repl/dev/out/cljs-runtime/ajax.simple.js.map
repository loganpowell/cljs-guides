{"version":3,"file":"ajax.simple.js","sources":["ajax/simple.cljc"],"mappings":"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","names":["ajax.simple/normalize-method","method","cljs.core/Keyword","clojure.string/upper-case","cljs.core/name","ajax.simple/process-response","response","interceptor","ajax.protocols/-process-response","var_args","G__36429","ajax.simple/js-handler","js/Error","handler","interceptors","processed","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__36438","map__36439","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","ajax.simple/base-handler","ajax.simple.js_handler.cljs$core$IFn$_invoke$arity$2","ajax.util/throw-error","ajax.simple/default-interceptors","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","ajax.simple/normalize-request","request","response-format","ajax.interceptors/get-response-format","ajax.formats/detect-response-format","cljs.core.update.cljs$core$IFn$_invoke$arity$3","p1__36444#","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","or__3922__auto__","cljs.core/deref","ajax.interceptors/request-interceptors","ajax.simple/new-default-api","goog/net.XhrIo","ajax.simple/process-request","ajax.protocols/-process-request","p__36445","map__36446","ajax.simple/raw-ajax-request","cljs.core/reverse","api","ajax.protocols/-js-ajax-request","ajax.simple/ajax-request"],"sourcesContent":["(ns ajax.simple\n    (:require [clojure.string :as str]\n              [ajax.protocols :as pr]\n              [ajax.interceptors :as i]\n              [ajax.formats :as f]\n              [ajax.util :as u]\n              #? (:clj [ajax.apache :as a])\n              #? (:clj [poppea :as p]\n                  :cljs [goog.net.XhrIo :as xhr]))\n    #? (:clj (:import [java.io Closeable])\n        :cljs (:require-macros [poppea :as p])))\n\n(defn normalize-method [method]\n  (if (keyword? method)\n    (str/upper-case (name method))\n    method))\n\n(defn process-response [response interceptor]\n  (pr/-process-response interceptor response))\n\n(p/defn-curried js-handler [handler interceptors response]\n  (let [processed (reduce process-response response interceptors)]\n    ;;; This requires a bit of explanation: if we return a closeable,\n    ;;; it should be wrapping the original response, so we _don't_\n    ;;; close the original response stream\n    ;;; If you're writing a weird interceptor that doesn't do this,\n    ;;; remember to close the original stream yourself\n    #? (:clj (if (and response\n                      (instance? Closeable (second processed)))\n               (.close ^Closeable (pr/-body response))))\n    (handler processed)))\n\n(defn base-handler [interceptors {:keys [handler]}]\n  (if handler\n    (js-handler handler interceptors)\n    (u/throw-error \"No ajax handler provided.\")))\n\n(def default-interceptors (atom []))\n\n(defn normalize-request [request]\n  (let [response-format (i/get-response-format f/detect-response-format request)]\n    (-> request\n        (update :method normalize-method)\n        (update :interceptors\n                #(concat [response-format]\n                         (or % @default-interceptors)\n                         i/request-interceptors)))))\n\n(defn new-default-api []\n  #? (:clj  (a/new-api)\n      :cljs (new goog.net.XhrIo)))\n\n(defn process-request [request interceptor]\n  \"-process-request with the arguments flipped for use in reduce\"\n  (pr/-process-request interceptor request))\n\n(defn raw-ajax-request [{:keys [interceptors] :as request}]\n  \"The main request function.\"\n  (let [request (reduce process-request request interceptors)\n        ;;; Pass the request through the interceptors\n        handler (base-handler (reverse interceptors) request)\n        ;;; Set up a handler that passes it back through\n        api (or (:api request) (new-default-api))]\n    (pr/-js-ajax-request api request handler)))\n\n(defn ajax-request [request]\n  (-> request normalize-request raw-ajax-request))\n"]}