{"version":3,"file":"cognitect.transit.js","sources":["cognitect/transit.cljs"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","cljs.core/UUID","this","other","com.cognitect.transit.types/UUID","cljs.core/compare","js/Error","goog/math.Long","cljs.core/-equiv","com.cognitect.transit.types/TaggedValue","com.cognitect.transit.eq/hashCode","cljs.core/hash","uuid","writer","_","cljs.core/-write","cognitect.transit/opts-merge","a","b","seq__36048","cljs.core/seq","chunk__36049","count__36050","i__36051","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","k","cljs.core/js-keys","v","this__4161__auto__","writer__4162__auto__","opt__4163__auto__","cognitect.transit/MapBuilder","cognitect.transit/->MapBuilder","node","cljs.core/transient","m","cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/persistent!","arr","cljs.core/PersistentArrayMap.fromArray","cognitect.transit/VectorBuilder","cognitect.transit/->VectorBuilder","x","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector.fromArray","var_args","G__36091","cognitect.transit/reader","type","cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2","opts","G__36095","G__36096","com.cognitect.transit/reader","cljs.core/name","cljs.core/clj->js","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$2","i","ret","cljs.core/with-meta","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cognitect.transit/read","r","str","cognitect.transit/KeywordHandler","cognitect.transit/->KeywordHandler","cognitect.transit/SymbolHandler","cognitect.transit/->SymbolHandler","cognitect.transit/ListHandler","cognitect.transit/->ListHandler","seq__36106","chunk__36107","count__36108","i__36109","com.cognitect.transit/tagged","cognitect.transit/MapHandler","cognitect.transit/->MapHandler","cognitect.transit/SetHandler","cognitect.transit/->SetHandler","seq__36131","chunk__36132","count__36133","i__36134","cognitect.transit/VectorHandler","cognitect.transit/->VectorHandler","seq__36156","chunk__36157","count__36158","i__36159","cognitect.transit/UUIDHandler","cognitect.transit/->UUIDHandler","cognitect.transit/WithMeta","cognitect.transit/->WithMeta","value","meta","cognitect.transit/WithMetaHandler","cognitect.transit/->WithMetaHandler","G__36181","G__36182","G__36184","cognitect.transit/writer","cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2","keyword-handler","symbol-handler","list-handler","map-handler","set-handler","vector-handler","uuid-handler","meta-handler","handlers","cljs.core/Keyword","cljs.core/Symbol","cljs.core/Range","cljs.core/List","cljs.core/Cons","cljs.core/EmptyList","cljs.core/LazySeq","cljs.core/RSeq","cljs.core/IndexedSeq","cljs.core/ChunkedCons","cljs.core/ChunkedSeq","cljs.core/PersistentQueueSeq","cljs.core/PersistentQueue","cljs.core/PersistentArrayMapSeq","cljs.core/PersistentTreeMapSeq","cljs.core/NodeSeq","cljs.core/ArrayNodeSeq","cljs.core/KeySeq","cljs.core/ValSeq","cljs.core/PersistentArrayMap","cljs.core/PersistentHashMap","cljs.core/PersistentTreeMap","cljs.core/PersistentHashSet","cljs.core/PersistentTreeSet","cljs.core/PersistentVector","cljs.core/Subvec","cljs.core/Eduction","cljs.core/Repeat","cljs.core/MapEntry","G__36185","G__36186","com.cognitect.transit/writer","kfn","vfn","cljs.core/reduce-kv","obj","G__36187","x36188","cljs.core/clone","coll","f","seq__36189","chunk__36190","count__36191","i__36192","vec__36193","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__36196","cognitect.transit/write","w","o","cognitect.transit/read-handler","from-rep","G__36215","cognitect.transit/write-handler","tag-fn","rep-fn","cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$4","str-rep-fn","verbose-handler-fn","cognitect.transit/t_cognitect$transit36226","_36228","meta36227","cognitect.transit/->t_cognitect$transit36226","cognitect.transit/tagged-value","tag","rep","com.cognitect.transit.types/taggedValue","cognitect.transit/tagged-value?","com.cognitect.transit.types/isTaggedValue","cognitect.transit/integer","s","com.cognitect.transit.types/intValue","cognitect.transit/integer?","com.cognitect.transit.types/isInteger","cognitect.transit/bigint","com.cognitect.transit.types/bigInteger","cognitect.transit/bigint?","com.cognitect.transit.types/isBigInteger","cognitect.transit/bigdec","com.cognitect.transit.types/bigDecimalValue","cognitect.transit/bigdec?","com.cognitect.transit.types/isBigDecimal","cognitect.transit/uri","com.cognitect.transit.types/uri","cognitect.transit/uri?","com.cognitect.transit.types/isURI","cognitect.transit/uuid","com.cognitect.transit.types/uuid","cognitect.transit/uuid?","or__3922__auto__","com.cognitect.transit.types/isUUID","cognitect.transit/binary","com.cognitect.transit.types/binary","cognitect.transit/binary?","com.cognitect.transit.types/isBinary","cognitect.transit/quoted","com.cognitect.transit.types/quoted","cognitect.transit/quoted?","com.cognitect.transit.types/isQuoted","cognitect.transit/link","com.cognitect.transit.types/link","cognitect.transit/link?","com.cognitect.transit.types/isLink","cognitect.transit/write-meta"],"sourcesContent":[";; Copyright 2014-2018 Cognitect. All Rights Reserved.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;      http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS-IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n\n(ns cognitect.transit\n  (:refer-clojure :exclude [integer? uuid uuid? uri?])\n  (:require [com.cognitect.transit :as t]\n            [com.cognitect.transit.types :as ty]\n            [com.cognitect.transit.eq :as eq])\n  (:import [goog.math Long]))\n\n;; patch cljs.core/UUID IEquiv\n\n(extend-type UUID\n  IEquiv\n  (-equiv [this other]\n    (cond\n      (instance? UUID other)\n      (identical? (.-uuid this) (.-uuid other))\n\n      (instance? ty/UUID other)\n      (identical? (.-uuid this) (.toString other))\n\n      :else false)))\n\n(extend-protocol IComparable\n  UUID\n  (-compare [this other]\n    (if (or (instance? UUID other)\n            (instance? ty/UUID other))\n      (compare (.toString this) (.toString other))\n      (throw (js/Error. (str \"Cannot compare \" this \" to \" other)))))\n  ty/UUID\n  (-compare [this other]\n    (if (or (instance? UUID other)\n            (instance? ty/UUID other))\n      (compare (.toString this) (.toString other))\n      (throw (js/Error. (str \"Cannot compare \" this \" to \" other))))))\n\n(extend-protocol IEquiv\n  Long\n  (-equiv [this other]\n    (.equiv this other))\n  \n  ty/UUID\n  (-equiv [this other]\n    (if (instance? UUID other)\n      (-equiv other this)\n      (.equiv this other)))\n\n  ty/TaggedValue\n  (-equiv [this other]\n    (.equiv this other)))\n\n(extend-protocol IHash\n  Long\n  (-hash [this]\n    (eq/hashCode this))\n\n  ty/UUID\n  (-hash [this]\n    (hash (.toString this)))\n\n  ty/TaggedValue\n  (-hash [this]\n    (eq/hashCode this)))\n\n(extend-type ty/UUID\n  IPrintWithWriter\n  (-pr-writer [uuid writer _]\n    (-write writer (str \"#uuid \\\"\" (.toString uuid) \"\\\"\"))))\n\n(defn ^:no-doc opts-merge [a b]\n  (doseq [k (js-keys b)]\n    (let [v (aget b k)]\n      (aset a k v)))\n  a)\n\n(deftype ^:no-doc MapBuilder []\n  Object\n  (init [_ node] (transient {}))\n  (add [_ m k v node] (assoc! m k v))\n  (finalize [_ m node] (persistent! m))\n  (fromArray [_ arr node] (cljs.core/PersistentArrayMap.fromArray arr true true)))\n\n(deftype ^:no-doc VectorBuilder []\n  Object\n  (init [_ node] (transient []))\n  (add [_ v x node] (conj! v x))\n  (finalize [_ v node] (persistent! v))\n  (fromArray [_ arr node] (cljs.core/PersistentVector.fromArray arr true)))\n\n(defn reader\n  \"Return a transit reader. type may be either :json or :json-verbose.\n   opts may be a map optionally containing a :handlers entry. The value\n   of :handlers should be map from tag to a decoder function which returns\n   then in-memory representation of the semantic transit value.\"\n  ([type] (reader type nil))\n  ([type opts]\n     (t/reader (name type)\n       (opts-merge\n         #js {:handlers\n              (clj->js\n                (merge\n                  {\"$\"    (fn [v] (symbol v))\n                   \":\"    (fn [v] (keyword v))\n                   \"set\"  (fn [v] (into #{} v))\n                   \"list\" (fn [v] (into () (.reverse v)))\n                   \"cmap\" (fn [v] \n                            (loop [i 0 ret (transient {})]\n                              (if (< i (alength v))\n                                (recur (+ i 2)\n                                  (assoc! ret (aget v i) (aget v (inc i))))\n                                (persistent! ret))))\n                   \"with-meta\"\n                          (fn [v] (with-meta (aget v 0) (aget v 1)))}\n                  (:handlers opts)))\n              :mapBuilder (MapBuilder.)\n              :arrayBuilder (VectorBuilder.)\n              :prefersStrings false}\n         (clj->js (dissoc opts :handlers))))))\n\n(defn read\n  \"Read a transit encoded string into ClojureScript values given a \n   transit reader.\"\n  [r str]\n  (.read r str))\n\n(deftype ^:no-doc KeywordHandler []\n  Object\n  (tag [_ v] \":\")\n  (rep [_ v] (.-fqn v))\n  (stringRep [_ v] (.-fqn v)))\n\n(deftype ^:no-doc SymbolHandler []\n  Object\n  (tag [_ v] \"$\")\n  (rep [_ v] (.-str v))\n  (stringRep [_ v] (.-str v)))\n\n(deftype ^:no-doc ListHandler []\n  Object\n  (tag [_ v] \"list\")\n  (rep [_ v]\n    (let [ret #js []]\n      (doseq [x v] (.push ret x))\n      (t/tagged \"array\" ret)))\n  (stringRep [_ v] nil))\n\n(deftype ^:no-doc MapHandler []\n  Object\n  (tag [_ v] \"map\")\n  (rep [_ v] v)\n  (stringRep [_ v] nil))\n\n(deftype ^:no-doc SetHandler []\n  Object\n  (tag [_ v] \"set\")\n  (rep [_ v]\n    (let [ret #js []]\n      (doseq [x v] (.push ret x))\n      (t/tagged \"array\" ret)))\n  (stringRep [v] nil))\n\n(deftype ^:no-doc VectorHandler []\n  Object\n  (tag [_ v] \"array\")\n  (rep [_ v]\n    (let [ret #js []]\n      (doseq [x v] (.push ret x))\n      ret))\n  (stringRep [_ v] nil))\n\n(deftype ^:no-doc UUIDHandler []\n  Object\n  (tag [_ v] \"u\")\n  (rep [_ v] (.-uuid v))\n  (stringRep [this v] (.rep this v)))\n\n(deftype ^:no-doc WithMeta [value meta])\n\n(deftype ^:no-doc WithMetaHandler []\n  Object\n  (tag [_ v] \"with-meta\")\n  (rep [_ v]\n    (t/tagged \"array\" #js [(.-value v) (.-meta v)]))\n  (stringRep [_ v] nil))\n\n(defn writer\n  \"Return a transit writer. type maybe either :json or :json-verbose.\n  opts is a map with the following optional keys:\n\n    :handlers  - a map of type constructors to handler instances.\n    :transform - a function of one argument returning a transformed value. Will\n                 be invoked on a value before it is written.\"\n  ([type] (writer type nil))\n  ([type opts]\n     (let [keyword-handler (KeywordHandler.)\n           symbol-handler  (SymbolHandler.)\n           list-handler    (ListHandler.)\n           map-handler     (MapHandler.)\n           set-handler     (SetHandler.)\n           vector-handler  (VectorHandler.)\n           uuid-handler    (UUIDHandler.)\n           meta-handler    (WithMetaHandler.)\n           handlers\n           (merge\n             {cljs.core/Keyword               keyword-handler\n              cljs.core/Symbol                symbol-handler\n              cljs.core/Range                 list-handler\n              cljs.core/List                  list-handler\n              cljs.core/Cons                  list-handler\n              cljs.core/EmptyList             list-handler\n              cljs.core/LazySeq               list-handler\n              cljs.core/RSeq                  list-handler\n              cljs.core/IndexedSeq            list-handler\n              cljs.core/ChunkedCons           list-handler\n              cljs.core/ChunkedSeq            list-handler\n              cljs.core/PersistentQueueSeq    list-handler\n              cljs.core/PersistentQueue       list-handler\n              cljs.core/PersistentArrayMapSeq list-handler\n              cljs.core/PersistentTreeMapSeq  list-handler\n              cljs.core/NodeSeq               list-handler\n              cljs.core/ArrayNodeSeq          list-handler\n              cljs.core/KeySeq                list-handler\n              cljs.core/ValSeq                list-handler\n              cljs.core/PersistentArrayMap    map-handler\n              cljs.core/PersistentHashMap     map-handler\n              cljs.core/PersistentTreeMap     map-handler\n              cljs.core/PersistentHashSet     set-handler\n              cljs.core/PersistentTreeSet     set-handler\n              cljs.core/PersistentVector      vector-handler\n              cljs.core/Subvec                vector-handler\n              cljs.core/UUID                  uuid-handler\n              WithMeta                        meta-handler}\n             (when (exists? cljs.core/Eduction)\n               {^:cljs.analyzer/no-resolve cljs.core/Eduction list-handler})\n             (when (exists? cljs.core/Repeat)\n               {^:cljs.analyzer/no-resolve cljs.core/Repeat list-handler})\n             (when (exists? cljs.core/MapEntry)\n               {^:cljs.analyzer/no-resolve cljs.core/MapEntry vector-handler})\n             (:handlers opts))]\n      (t/writer (name type)\n        (opts-merge\n          #js {:objectBuilder\n               (fn [m kfn vfn]\n                 (reduce-kv\n                   (fn [obj k v]\n                     (doto obj (.push (kfn k) (vfn v))))\n                   #js [\"^ \"] m))\n               :handlers\n               (specify handlers\n                 Object\n                 (forEach\n                   ([coll f]\n                      (doseq [[k v] coll]\n                        (f v k)))))\n               :unpack\n               (fn [x]\n                 (if (instance? cljs.core/PersistentArrayMap x)\n                   (.-arr x)\n                   false))}\n          (clj->js (dissoc opts :handlers)))))))\n\n(defn write\n  \"Encode an object into a transit string given a transit writer.\"\n  [w o]\n  (.write w o))\n\n(defn read-handler\n  \"Construct a read handler. Implemented as identity, exists primarily\n   for API compatiblity with transit-clj\"\n  [from-rep]\n  from-rep)\n\n(defn write-handler\n  \"Creates a transit write handler whose tag, rep,\n   stringRep, and verboseWriteHandler methods\n   invoke the provided fns.\"\n  ([tag-fn rep-fn]\n     (write-handler tag-fn rep-fn nil nil))\n  ([tag-fn rep-fn str-rep-fn]\n     (write-handler tag-fn rep-fn str-rep-fn nil))\n  ([tag-fn rep-fn str-rep-fn verbose-handler-fn]\n     (reify\n       Object\n       (tag [_ o] (tag-fn o))\n       (rep [_ o] (rep-fn o))\n       (stringRep [_ o] (when str-rep-fn (str-rep-fn o)))\n       (getVerboseHandler [_] (when verbose-handler-fn (verbose-handler-fn))))))\n\n;; =============================================================================\n;; Constructors & Predicates\n\n(defn tagged-value\n  \"Construct a tagged value. tag must be a string and rep can\n   be any transit encodeable value.\"\n  [tag rep]\n  (ty/taggedValue tag rep))\n\n(defn tagged-value?\n  \"Returns true if x is a transit tagged value, false otherwise.\"\n  [x]\n  (ty/isTaggedValue x))\n\n(defn integer\n  \"Construct a transit integer value. Returns JavaScript number if\n  in the 53bit integer range, a goog.math.Long instance if above. s\n  may be a string or a JavaScript number.\"\n  [s]\n  (ty/intValue s))\n\n(defn integer?\n  \"Returns true if x is an integer value between the 53bit and 64bit\n  range, false otherwise.\"\n  [x]\n  (ty/isInteger x))\n\n(defn bigint\n  \"Construct a big integer from a string.\"\n  [s]\n  (ty/bigInteger s))\n\n(defn bigint?\n  \"Returns true if x is a transit big integer value, false otherwise.\"\n  [x]\n  (ty/isBigInteger x))\n\n(defn bigdec\n  \"Construct a big decimal from a string.\"\n  [s]\n  (ty/bigDecimalValue s))\n\n(defn bigdec?\n  \"Returns true if x is a transit big decimal value, false otherwise.\"\n  [x]\n  (ty/isBigDecimal x))\n\n(defn uri\n  \"Construct a URI from a string.\"\n  [s]\n  (ty/uri s))\n\n(defn uri?\n  \"Returns true if x is a transit URI value, false otherwise.\"\n  [x]\n  (ty/isURI x))\n\n(defn uuid\n  \"Construct a UUID from a string.\"\n  [s]\n  (ty/uuid s))\n\n(defn uuid?\n  \"Returns true if x is a transit UUID value, false otherwise.\"\n  [x]\n  (or (ty/isUUID x) (instance? UUID x)))\n\n(defn binary\n  \"Construct a transit binary value. s should be base64 encoded\n   string.\"\n  [s]\n  (ty/binary s))\n\n(defn binary?\n  \"Returns true if x is a transit binary value, false otherwise.\"\n  [x]\n  (ty/isBinary x))\n\n(defn quoted\n  \"Construct a quoted transit value. x should be a transit\n   encodeable value.\"\n  [x]\n  (ty/quoted x))\n\n(defn quoted?\n  \"Returns true if x is a transit quoted value, false otherwise.\"\n  [x]\n  (ty/isQuoted x))\n\n(defn link\n  \"Construct a transit link value. x should be an IMap instance\n   containing at a minimum the following keys: :href, :rel. It\n   may optionall include :name, :render, and :prompt. :href must\n   be a transit URI, all other values are strings, and :render must\n   be either :image or :link.\"\n  [x]\n  (ty/link x))\n\n(defn link?\n  \"Returns true if x a transit link value, false if otherwise.\"\n  [x]\n  (ty/isLink x))\n\n(defn write-meta\n  \"For :transform. Will write any metadata present on the value.\"\n  [x]\n  (if (implements? IMeta x)\n    (let [m (-meta ^not-native x)]\n      (if-not (nil? m)\n        (WithMeta. (-with-meta ^not-native x nil) m)\n        x))\n    x))"]}