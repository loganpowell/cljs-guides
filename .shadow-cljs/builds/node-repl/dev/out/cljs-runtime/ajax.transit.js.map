{"version":3,"file":"ajax.transit.js","sources":["ajax/transit.cljc"],"mappings":";;;;;;AAQA,4BAAA,oCAAAA,hEAAMM;AAAN,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAC,gCAAA,AAAAD,+BAAA,KAAA,OAAA,QAAA,AAAAE,8CAAAC,mBAAAH,YAAAA;WAAA,AAAAI,4CAAAJ,eAAA,lEAA4BM;AAA5B,AACE,IAAAC,mBAAID;AAAJ,AAAA,oBAAAC;AAAAA;;AAAA;;;AAEQ,gCAAA,hCAAMC,wEACHF,KAAKG;AADR,AAEE,IAAMC,SAAO,iBAAAH,mBAAI,AAAA,uFAASE;AAAb,AAAA,oBAAAF;AAAAA;;AACI,OAACI,uDAASL,KAAKG;;;AADhC,AAEE;sEAA0BG;AAA1B,AACE,OAACC,wBAAQH,OAAOE;;;;AAMhC,AAAA,sCAAA,8CAAAE,pFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,kEAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,oEAAA,pEAAMD;AAAN,AACM,yEAAA,lEAACE;;;AADP,AAAA,oEAAA,pEAAMF,+EAEFP;AAFJ,AAGK,IAAMH,OAAK,AAACD,0BAAaI;IACnBU,YAAU,2GAAA,OAAA,hHAAI,kDAAA,lDAACC,6CAAEd;AADvB,AAAA,kDAAA,oGAAA,5CAEU,AAACE,8BAAiBF,KAAKG,8EAChB,CAAA,mEAA4BU;;;AANlD,AAAA,8DAAA,9DAAMH;;AAAN,AAQU,+BAAA,/BAAMK,sEAAiBZ;AAAvB,AACE,IAAMa,SAAO,iBAAAf,mBAAI,AAAA,sFAASE;AAAb,AAAA,oBAAAF;AAAAA;;AACI,8DAAA,vDAACgB,4GAAed;;;AADjC,AAEE;sEAA2Be;AAA3B,AACE,OAACC,uBAAOH,OAAO,AAACI,qBAASF;;;;AASzC,AAAA,uCAAA,+CAAAV,tFAAMc;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,mEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAX,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,qEAAA,rEAAMW;AAAN,AACM,0EAAA,nEAACC;;;AADP,AAAA,qEAAA,rEAAMD,gFAEFnB;AAFJ,AAGK,OAACqB,mEAAwB,AAACzB,0BAAaI,SAASA;;;AAHrD,AAAA,qEAAA,rEAAMmB,gFAIFtB,KAAKG;AAJT,AAKK,gDAAA,2CAAA,2FAAA,oEAAA,UAAA,qEAAA,mFAAA,rZAACsB,yIACO,AAACV,6BAAgBZ;;;AAN9B,AAAA,+DAAA,/DAAMmB;;AAAN","names":["p__36372","map__36373","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","ajax.transit/transit-type","type","or__3922__auto__","ajax.transit/transit-write-fn","request","writer","cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2","params","cognitect.transit/write","var_args","G__36379","ajax.transit/transit-request-format","js/Error","ajax.transit.transit_request_format.cljs$core$IFn$_invoke$arity$1","mime-type","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","ajax.transit/transit-read-fn","reader","cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2","response","cognitect.transit/read","ajax.protocols/-body","G__36392","ajax.transit/transit-response-format","ajax.transit.transit_response_format.cljs$core$IFn$_invoke$arity$1","ajax.transit.transit_response_format.cljs$core$IFn$_invoke$arity$2","ajax.interceptors/map->ResponseFormat"],"sourcesContent":["(ns ajax.transit\n    (:require [cognitect.transit :as t]\n              [ajax.interceptors :as i]\n              [ajax.protocols :as pr]\n              [ajax.util :as u]\n              #? (:clj  [poppea :as p]))\n    #? (:cljs (:require-macros [poppea :as p])))\n\n(defn transit-type [{:keys [type]}]\n  (or type #? (:cljs :json :clj :msgpack)))\n\n#? (:cljs (defn transit-write-fn\n            [type request]\n            (let [writer (or (:writer request)\n                             (t/writer type request))]\n              (fn transit-write-params [params]\n                (t/write writer params))))\n    :clj (p/defn-curried transit-write-fn\n           [type request stream params]\n           (let [writer (t/writer stream type request)]\n             (t/write writer params))))\n\n(defn transit-request-format\n  ([] (transit-request-format {}))\n  ([request]\n     (let [type (transit-type request)\n           mime-type (if (= type :json) \"json\" \"msgpack\")]\n       {:write (transit-write-fn type request)\n        :content-type (str \"application/transit+\" mime-type)})))\n\n#? (:cljs (defn transit-read-fn [request]\n            (let [reader (or (:reader request)\n                             (t/reader :json request))]\n              (fn transit-read-response [response]\n                (t/read reader (pr/-body response)))))\n    :clj (p/defn-curried transit-read-fn [request response]\n           (let [content-type (u/get-content-type response)\n                 type (if (.contains content-type \"msgpack\")\n                        :msgpack :json)\n                 stream (pr/-body response)\n                 reader (t/reader stream type request)]\n             (t/read reader))))\n\n(defn transit-response-format\n  ([] (transit-response-format {}))\n  ([request]\n     (transit-response-format (transit-type request) request))\n  ([type request]\n     (i/map->ResponseFormat\n      {:read (transit-read-fn request)\n       :description \"Transit\"\n       :content-type\n       #? (:cljs [\"application/transit+json\"]\n           :clj [\"application/transit+msgpack\"\n                 \"application/transit+json\"])})))\n"]}