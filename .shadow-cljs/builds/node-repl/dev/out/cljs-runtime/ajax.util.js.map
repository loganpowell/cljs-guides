{"version":3,"file":"ajax.util.js","sources":["ajax/util.cljc"],"mappings":";;;AAQA,wBAAA,xBAAMA,wDAAaC;AAAnB,AAAA;AAEE,MAAO,KAAAC,MACE,6CAAKD;;AAEhB,6BAAA,7BAAME,kEAA0BC;AAAhC,AACE,IAAAC,mBAAI,6CAAA,7CAACC,oCAAwBF;AAA7B,AAAA,oBAAAC;AAAAA;;AAAA;;;AAEF,2BAAA,3BAAME,8DAAgBC;AAAtB,AAAA;AAMYA","names":["ajax.util/throw-error","args","js/Error","ajax.util/get-content-type","response","or__3922__auto__","ajax.protocols/-get-response-header","ajax.util/to-utf8-writer","to-str"],"sourcesContent":["(ns ajax.util\n  \"Short utility functions. A lot of these only exist because the \n   cross platform implementation is annoying.\"\n   (:require [ajax.protocols :as pr])\n     #? (:clj\n      (:import [java.io OutputStreamWriter]\n               [java.lang String])))\n\n(defn throw-error [args]\n  \"Throws an error.\"\n  (throw (#?(:clj Exception. :cljs js/Error.)\n           (str args))))\n\n(defn get-content-type ^String [response]\n  (or (pr/-get-response-header response \"Content-Type\") \"\"))\n\n(defn to-utf8-writer [to-str]\n  \"Takes a function that converts to a string and transforms it\n   into a function that converts to an object that will write\n   UTF-8 to the wire. Note that this is the identity function\n   for JavaScript because the underlying implementations take\n   a string.\"\n  #? (:cljs to-str\n      :clj (fn write-utf8 [stream params]\n             (doto (OutputStreamWriter. stream)\n               (.write ^String (to-str params))\n               (.flush)))))\n\n"]}