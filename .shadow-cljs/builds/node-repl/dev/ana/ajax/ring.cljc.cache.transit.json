["^ ","~:output",["^ ","~:js","goog.provide('ajax.ring');\r\ngoog.require('cljs.core');\r\ngoog.require('ajax.interceptors');\r\ngoog.require('ajax.protocols');\r\ngoog.require('ajax.formats');\r\najax.ring.make_ring_read = (function ajax$ring$make_ring_read(body_read){\r\nreturn (function ajax$ring$make_ring_read_$_ring_read(response){\r\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"status\",\"status\",-1997798413),ajax.protocols._status(response),new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),ajax.protocols._get_all_headers(response),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),(body_read.cljs$core$IFn$_invoke$arity$1 ? body_read.cljs$core$IFn$_invoke$arity$1(response) : body_read.call(null,response))], null);\r\n});\r\n});\r\n/**\r\n * Returns a Ring-compatible response map.\r\n * \r\n * Optionally can be passed a :format option. This should be another\r\n * response-format map. If format is provided it will be used to\r\n * specify the content-type, and the read method will be used to\r\n * populate the :body key in the response map.\r\n */\r\najax.ring.ring_response_format = (function ajax$ring$ring_response_format(var_args){\r\nvar G__36417 = arguments.length;\r\nswitch (G__36417) {\r\ncase 0:\r\nreturn ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$0();\r\n\r\nbreak;\r\ncase 1:\r\nreturn ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\najax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$0 = (function (){\r\nreturn ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),ajax.formats.raw_response_format.cljs$core$IFn$_invoke$arity$0()], null));\r\n});\r\n\r\najax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1 = (function (p__36423){\r\nvar map__36424 = p__36423;\r\nvar map__36424__$1 = ((((!((map__36424 == null)))?(((((map__36424.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__36424.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__36424):map__36424);\r\nvar map__36425 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36424__$1,new cljs.core.Keyword(null,\"format\",\"format\",-1306924766));\r\nvar map__36425__$1 = ((((!((map__36425 == null)))?(((((map__36425.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__36425.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__36425):map__36425);\r\nvar read = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36425__$1,new cljs.core.Keyword(null,\"read\",\"read\",1140058661));\r\nvar description = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36425__$1,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544));\r\nvar content_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36425__$1,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634));\r\nreturn ajax.interceptors.map__GT_ResponseFormat(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"read\",\"read\",1140058661),ajax.ring.make_ring_read(read),new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),[\"ring/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(description)].join(''),new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),content_type], null));\r\n});\r\n\r\najax.ring.ring_response_format.cljs$lang$maxFixedArity = 1;\r\n\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","ajax/ring.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",14],"~:ns-aliases",["^ ","~$fs","~$shadow.js.shim.module$fs"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$ajax.ring","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ajax.interceptors","^G","~$ajax.protocols","^H","~$ajax.formats","^I","~$f","^I","~$cljs.core","^J","~$goog","^K"],"~:seen",["^@",["~:require"]],"~:uses",["^ ","~$map->ResponseFormat","^G","~$-status","^H","~$-get-all-headers","^H","~$-body","^H"],"~:require-macros",["^ ","^J","^J"],"~:form",["~#list",["~$ns","^B",["^U",["^M",["^G","~:refer",["^O"]],["^H","^W",["^P","^Q","^R"]],["^I","~:as","~$f"]]]]],"~:flags",["^ ","^M",["^@",[]]],"~:js-deps",["^ "],"~:deps",["^K","^J","^G","^H","^I"]],"^D","^B","~:resource-id",["~:shadow.build.classpath/resource","ajax/ring.cljc"],"~:compiled-at",1527515417260,"~:resource-name","ajax/ring.cljc","~:warnings",[],"~:source","(ns ajax.ring\n  (:require [ajax.interceptors :refer [map->ResponseFormat]]\n            [ajax.protocols :refer [-status -get-all-headers -body]]\n            [ajax.formats :as f]))\n\n(defn make-ring-read [body-read]\n  (fn ring-read [response]\n    {:status (-status response)\n     :headers (-get-all-headers response)\n     :body (body-read response)}))\n\n(defn ring-response-format\n  \"Returns a Ring-compatible response map.\n\n   Optionally can be passed a :format option. This should be another\n   response-format map. If format is provided it will be used to\n   specify the content-type, and the read method will be used to\n   populate the :body key in the response map.\"\n  ([] (ring-response-format {:format (f/raw-response-format)}))\n  ([{{:keys [read description content-type]} :format}]\n   (map->ResponseFormat {:read (make-ring-read read)\n                         :description (str \"ring/\" description)\n                         :content-type content-type})))\n","~:reader-features",["^@",["~:cljs"]],"~:source-map",["^ ","~i5",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",5],["^ ","^19",27,"^1:",5],["^ ","^19",0,"^1:",6]],"~i6",[["^ ","^19",0,"^1:",5,"^A","ajax.ring/make-ring-read"]],"~i22",[["^ ","^19",62,"^1:",5,"^A","body-read"]]],"~i6",["^ ","~i2",[["^ ","^19",0,"^1:",6],["^ ","^19",0,"^1:",7],["^ ","^19",0,"^1:",7],["^ ","^19",50,"^1:",7],["^ ","^19",141,"^1:",7],["^ ","^19",242,"^1:",7]],"~i17",[["^ ","^19",54,"^1:",6,"^A","response"]]],"~i7",["^ ","~i13",[["^ ","^19",108,"^1:",7]],"~i14",[["^ ","^19",108,"^1:",7,"^A","ajax.protocols/-status"]],"^1;",[["^ ","^19",131,"^1:",7,"^A","response"]]],"~i8",["^ ","^1>",[["^ ","^19",200,"^1:",7]],"~i15",[["^ ","^19",200,"^1:",7,"^A","ajax.protocols/-get-all-headers"]],"~i32",[["^ ","^19",232,"^1:",7,"^A","response"]]],"~i9",["^ ","~i11",[["^ ","^19",296,"^1:",7]],"~i12",[["^ ","^19",297,"^1:",7,"^A","body-read"],["^ ","^19",339,"^1:",7,"^A","body-read"],["^ ","^19",391,"^1:",7,"^A","body-read"]],"^1;",[["^ ","^19",379,"^1:",7,"^A","response"],["^ ","^19",411,"^1:",7,"^A","response"]]],"^1A",["^ ","~i0",[["^ ","^19",0,"^1:",10],["^ ","^19",0,"^1:",10],["^ ","^19",33,"^1:",18],["^ ","^19",74,"^1:",18,"^A","var_args"],["^ ","^19",0,"^1:",19],["^ ","^19",0,"^1:",19],["^ ","^19",4,"^1:",19,"^A","G__36417"],["^ ","^19",15,"^1:",19],["^ ","^19",15,"^1:",19],["^ ","^19",0,"^1:",20],["^ ","^19",0,"^1:",20],["^ ","^19",8,"^1:",20,"^A","G__36417"],["^ ","^19",5,"^1:",21],["^ ","^19",0,"^1:",22],["^ ","^19",7,"^1:",22,"^A","ajax.ring/ring-response-format"],["^ ","^19",5,"^1:",25],["^ ","^19",0,"^1:",26],["^ ","^19",7,"^1:",26,"^A","ajax.ring/ring-response-format"],["^ ","^19",68,"^1:",26],["^ ","^19",69,"^1:",26],["^ ","^19",79,"^1:",26],["^ ","^19",0,"^1:",30],["^ ","^19",6,"^1:",30],["^ ","^19",11,"^1:",30,"^A","js/Error"],["^ ","^19",17,"^1:",30],["^ ","^19",18,"^1:",30],["^ ","^19",80,"^1:",30],["^ ","^19",80,"^1:",30],["^ ","^19",0,"^1:",35],["^ ","^19",0,"^1:",35],["^ ","^19",63,"^1:",35],["^ ","^19",0,"^1:",36],["^ ","^19",0,"^1:",39],["^ ","^19",0,"^1:",39],["^ ","^19",63,"^1:",39],["^ ","^19",74,"^1:",39,"^A","p__36423"],["^ ","^19",0,"^1:",40],["^ ","^19",0,"^1:",40],["^ ","^19",4,"^1:",40,"^A","map__36424"],["^ ","^19",17,"^1:",40,"^A","p__36423"],["^ ","^19",4,"^1:",41,"^A","map__36424"],["^ ","^19",21,"^1:",41],["^ ","^19",23,"^1:",41],["^ ","^19",25,"^1:",41],["^ ","^19",27,"^1:",41],["^ ","^19",28,"^1:",41,"^A","map__36424"],["^ ","^19",42,"^1:",41],["^ ","^19",50,"^1:",41],["^ ","^19",52,"^1:",41],["^ ","^19",54,"^1:",41],["^ ","^19",55,"^1:",41],["^ ","^19",55,"^1:",41,"^A","map__36424"],["^ ","^19",104,"^1:",41],["^ ","^19",115,"^1:",41],["^ ","^19",116,"^1:",41,"^A","cljs.core/PROTOCOL_SENTINEL"],["^ ","^19",148,"^1:",41],["^ ","^19",148,"^1:",41,"^A","map__36424"],["^ ","^19",179,"^1:",41],["^ ","^19",184,"^1:",41],["^ ","^19",191,"^1:",41],["^ ","^19",199,"^1:",41],["^ ","^19",199,"^1:",41,"^A","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^19",245,"^1:",41,"^A","cljs.core/hash-map"],["^ ","^19",264,"^1:",41,"^A","map__36424"],["^ ","^19",276,"^1:",41,"^A","map__36424"],["^ ","^19",4,"^1:",42,"^A","map__36425"],["^ ","^19",17,"^1:",42],["^ ","^19",17,"^1:",42,"^A","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^19",61,"^1:",42,"^A","map__36424"],["^ ","^19",76,"^1:",42],["^ ","^19",4,"^1:",43,"^A","map__36425"],["^ ","^19",21,"^1:",43],["^ ","^19",23,"^1:",43],["^ ","^19",25,"^1:",43],["^ ","^19",27,"^1:",43],["^ ","^19",28,"^1:",43,"^A","map__36425"],["^ ","^19",42,"^1:",43],["^ ","^19",50,"^1:",43],["^ ","^19",52,"^1:",43],["^ ","^19",54,"^1:",43],["^ ","^19",55,"^1:",43],["^ ","^19",55,"^1:",43,"^A","map__36425"],["^ ","^19",104,"^1:",43],["^ ","^19",115,"^1:",43],["^ ","^19",116,"^1:",43,"^A","cljs.core/PROTOCOL_SENTINEL"],["^ ","^19",148,"^1:",43],["^ ","^19",148,"^1:",43,"^A","map__36425"],["^ ","^19",179,"^1:",43],["^ ","^19",184,"^1:",43],["^ ","^19",191,"^1:",43],["^ ","^19",199,"^1:",43],["^ ","^19",199,"^1:",43,"^A","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^19",245,"^1:",43,"^A","cljs.core/hash-map"],["^ ","^19",264,"^1:",43,"^A","map__36425"],["^ ","^19",276,"^1:",43,"^A","map__36425"],["^ ","^19",11,"^1:",44],["^ ","^19",11,"^1:",44,"^A","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^19",55,"^1:",44,"^A","map__36425"],["^ ","^19",70,"^1:",44],["^ ","^19",18,"^1:",45],["^ ","^19",18,"^1:",45,"^A","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^19",62,"^1:",45,"^A","map__36425"],["^ ","^19",77,"^1:",45],["^ ","^19",19,"^1:",46],["^ ","^19",19,"^1:",46,"^A","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^19",63,"^1:",46,"^A","map__36425"],["^ ","^19",78,"^1:",46],["^ ","^19",0,"^1:",47],["^ ","^19",0,"^1:",50],["^ ","^19",0,"^1:",50],["^ ","^19",57,"^1:",50],["^ ","^19",0,"^1:",52]],"~i6",[["^ ","^19",0,"^1:",18,"^A","ajax.ring/ring-response-format"],["^ ","^19",0,"^1:",35,"^A","ajax.ring/ring-response-format"],["^ ","^19",0,"^1:",39,"^A","ajax.ring/ring-response-format"],["^ ","^19",0,"^1:",50,"^A","ajax.ring/ring-response-format"]]],"~i18",["^ ","~i6",[["^ ","^19",0,"^1:",36],["^ ","^19",68,"^1:",36],["^ ","^19",111,"^1:",36]],"~i7",[["^ ","^19",7,"^1:",36,"^A","ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1"]],"~i37",[["^ ","^19",169,"^1:",36]],"~i38",[["^ ","^19",169,"^1:",36,"^A","ajax.formats.raw_response_format.cljs$core$IFn$_invoke$arity$0"]]],"~i19",["^ ","^1=",[["^ ","^19",4,"^1:",44,"^A","read"]],"^1C",[["^ ","^19",4,"^1:",45,"^A","description"]],"~i30",[["^ ","^19",4,"^1:",46,"^A","content-type"]]],"~i20",["^ ","~i3",[["^ ","^19",0,"^1:",47],["^ ","^19",48,"^1:",47],["^ ","^19",91,"^1:",47],["^ ","^19",175,"^1:",47],["^ ","^19",319,"^1:",47]],"~i4",[["^ ","^19",7,"^1:",47,"^A","ajax.interceptors/map->ResponseFormat"]],"~i31",[["^ ","^19",144,"^1:",47]],"^1@",[["^ ","^19",144,"^1:",47,"^A","ajax.ring/make-ring-read"]],"~i47",[["^ ","^19",169,"^1:",47,"^A","read"]]],"~i21",["^ ","^1E",[["^ ","^19",243,"^1:",47],["^ ","^19",244,"^1:",47]],"~i51",[["^ ","^19",296,"^1:",47,"^A","description"]]],"^1;",["^ ","~i39",[["^ ","^19",388,"^1:",47,"^A","content-type"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["~:macro","^J"],[1524148733000],["^11","goog/math/math.js"],[1520728212578,"^K","~$goog.array","~$goog.asserts","^K","^1R","^1S"],["^11","goog/array/array.js"],[1520728212578,"^K","^1S","^K","^1S"],["^11","goog/debug/error.js"],[1520728212578,"^K","^K"],["^11","ajax/interceptors.cljc"],[1527263550419,"^K","^J","~$clojure.string","~$ajax.util","~$ajax.url","^H"],["^11","goog/dom/nodetype.js"],[1520728212578,"^K","^K"],["^11","ajax/protocols.cljc"],[1527263550419,"^K","^J"],["^11","ajax/url.cljc"],[1527263550419,"^K","^J","^1T","^1U"],["^11","goog/object/object.js"],[1520728212578,"^K","^K"],"~:SHADOW-TIMESTAMP",[1527515083000,1524148733000],["^11","goog/math/long.js"],[1520728212578,"^K","^1S","~$goog.reflect","^K","^1S","^1X"],["^11","goog/functions/functions.js"],[1520728212578,"^K","^K"],["^11","goog/structs/map.js"],[1520728212578,"^K","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object","^K","^1Y","^1Z","^1["],["^11","ajax/util.cljc"],[1527263550419,"^K","^J","^H"],["^11","ajax/ring.cljc"],[1527263550419,"^K","^J","^G","^H","^I"],["^11","goog/asserts/asserts.js"],[1520728212578,"^K","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string","^K","^20","^21","^22"],["^11","goog/uri/uri.js"],[1520728212578,"^K","^1R","^1S","^22","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam","^K","^1R","^1S","^22","^23","^24","^25","^26","^27"],["^11","goog/base.js"],[1520728212578],["^11","goog/structs/structs.js"],[1520728212578,"^K","^1R","^1[","^K","^1R","^1["],["^1Q","~$ajax.macros"],[1527263550000],["^11","clojure/string.cljs"],[1524148733690,"^K","^J","^22","~$goog.string.StringBuffer","^K","^J","^22","^29"],["^11","goog/string/string.js"],[1520728212578,"^K","^K"],["^11","ajax/formats.cljc"],[1527263550419,"^K","^J","^G","^1U","^H"],["^11","goog/reflect/reflect.js"],[1520728212578,"^K","^K"],["^11","goog/string/stringbuffer.js"],[1520728212578,"^K","^K"],["^11","goog/iter/iter.js"],[1520728212578,"^K","^1R","^1S","~$goog.functions","~$goog.math","^K","^1R","^1S","^2:","^2;"],["^11","cljs/core.cljs"],[1524148733690,"~$goog.math.Long","~$goog.math.Integer","^22","^1[","^1R","~$goog.Uri","^29","^2<","^2=","^22","^1[","^1R","^2>","^29"],["^1Q","~$poppea"],[1527263550000],["^11","goog/math/integer.js"],[1520728212578,"^K","^K"],["^11","goog/uri/utils.js"],[1520728212578,"^K","^1R","^1S","^22","^K","^1R","^1S","^22"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","ajax/ring.cljc","^7",1,"^8",5,"^9",1,"^:",14],"^;",["^ ","^<","^="],"^>",null,"^?",["^@",[]],"^A","^B","^E",null,"^F",["^ ","^G","^G","^H","^H","^I","^I","~$f","^I","^J","^J","^K","^K"],"^L",["^@",["^M"]],"~:shadow/js-access-global",["^@",["Error"]],"^N",["^ ","^O","^G","^P","^H","^Q","^H","^R","^H"],"~:defs",["^ ","~$make-ring-read",["^ ","~:protocol-inline",null,"^5",["^ ","^6","ajax/ring.cljc","^7",6,"^8",7,"^9",6,"^:",21,"~:arglists",["^U",["~$quote",["^U",[["~$body-read"]]]]]],"^A","~$ajax.ring/make-ring-read","~:variadic",false,"^6","ajax/ring.cljc","^:",21,"~:method-params",["^U",[["^2G"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^8",1,"^7",6,"^9",6,"~:max-fixed-arity",1,"~:fn-var",true,"^2E",["^U",["^2F",["^U",[["^2G"]]]]]],"~$ring-response-format",["^ ","^2D",null,"^5",["^ ","^6","ajax/ring.cljc","^7",12,"^8",7,"^9",12,"^:",27,"^2E",["^U",["^2F",["^U",[[],[["^1P",[["^ ","~:keys",["~$read","~$description","~$content-type"]],"~:format"]]]]]]],"~:doc","Returns a Ring-compatible response map.\n\n   Optionally can be passed a :format option. This should be another\n   response-format map. If format is provided it will be used to\n   specify the content-type, and the read method will be used to\n   populate the :body key in the response map.","~:top-fn",["^ ","^2I",false,"^2M",1,"^2J",["^U",[[],[["^1P",[["^ ","^2P",["^2Q","^2R","^2S"]],"^2T"]]]]],"^2E",["^U",[[],[["^1P",[["^ ","^2P",["^2Q","^2R","^2S"]],"^2T"]]]]],"^2L",["^U",[null,null]]]],"^A","~$ajax.ring/ring-response-format","^2I",false,"^6","ajax/ring.cljc","^:",27,"^2V",["^ ","^2I",false,"^2M",1,"^2J",["^U",[[],[["^1P",[["^ ","^2P",["^2Q","^2R","^2S"]],"^2T"]]]]],"^2E",["^U",[[],[["^1P",[["^ ","^2P",["^2Q","^2R","^2S"]],"^2T"]]]]],"^2L",["^U",[null,null]]],"^2J",["^U",[[],[["^1P",[["^ ","^2P",["^2Q","^2R","^2S"]],"^2T"]]]]],"^2K",null,"^2L",["^U",[null,null]],"^8",1,"^7",12,"^9",12,"^2M",1,"^2N",true,"^2E",["^U",[[],[["^1P",[["^ ","^2P",["^2Q","^2R","^2S"]],"^2T"]]]]],"^2U","Returns a Ring-compatible response map.\n\n   Optionally can be passed a :format option. This should be another\n   response-format map. If format is provided it will be used to\n   specify the content-type, and the read method will be used to\n   populate the :body key in the response map."]],"^S",["^ ","^J","^J"],"~:cljs.analyzer/constants",["^ ","^L",["^@",["~:description","^2T","~:read","~:headers","~:status","~:content-type","~:body"]],"~:order",["^30","^2[","^32","^2T","^2Z","^2Y","^31"]],"^Y",["^ ","^M",["^@",[]]],"^Z",["^ "],"^[",["^K","^J","^G","^H","^I"]],"^D","^B","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1P",[["^36","~:static-fns"],true,["^36","~:elide-asserts"],false,["^36","~:optimize-constants"],null,["^36","~:external-config"],null,["^36","~:tooling-config"],null,["^36","~:emit-constants"],null,["^36","~:infer-externs"],true,["^36","^16"],null,["~:js-options","~:js-provider"],"^M",["~:mode"],"~:dev",["^36","~:fn-invoke-direct"],null,["^36","^18"],"/dev/null"]]]